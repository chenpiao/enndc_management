#!/usr/bin/env python
# coding:utf-8
"""
Django settings for enndc_management project.

Generated by 'django-admin startproject' using Django 1.8.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '@d6m$e9-_xj#t!h4wbc=u11b6i@rf9(-q_w9crvm7y0=mj!5va'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'suit',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',    	
    'djcelery',
    'kombu.transport.django',
    'asset',
    'report',
    'ops',
    'vmserver',
    'itsm',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    # 'django.contrib.auth.context_processors.auth',
)

ROOT_URLCONF = 'enndc_management.urls'


WSGI_APPLICATION = 'enndc_management.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'test_enndc',
        'USER': 'root',
        'PASSWORD': 'Enndc@test',
        'HOST': '***',
        'PORT': '3306',
        'TEST_CHARSET': 'utf8',
        'OPTIONS': {
            "init_command": "SET foreign_key_checks=0",
        }
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/
#STATIC_ROOT = os.path.join(os.path.dirname(__file__), 'static')
STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.contrib.auth.context_processors.auth',
                'django.core.context_processors.request',
            ],
        },
    },
]


# django suit conf
SUIT_CONFIG = {
    'ADMIN_NAME': 'ENNDC',
    'SEARCH_URL': '/admin/auth/user/',
    'MENU_ICONS': {
       'sites': 'icon-leaf',
       'auth': 'icon-user',
       'asset': 'icon-asterisk',
       'ops': 'icon-edit',
	   'vmserver': 'icon-edit',
    },
    'MENU_ORDER': (

      # To reorder existing apps use following definition
      ('sites',),
      ('auth', ('user', 'group')),
      ('asset', ('host', 'networkdevice', 'storage', 'tape', 'tools', 'equipment', 'software', 'industrygroup', 
                 'maintenance', 'hostsparepart', 'networksparepart', 'storagesparePart', 'hostlog',
                 'networkdevicelog', 'storagelog')),
      ('ops', ('hostinfo', 'vmserver', 'vspherepool', 'contact')),
	  ('vmserver', ('list', )),
      # If you want to link app models from different app use full name:
      ('sites', ('auth.user', 'auth.group')),

      
      (('MyCMDB', '/vmserver/dashboard_190/', 'icon-cog',),
       (
           ('dashboard', '/vmserver/dashboard_190/'),
       )
      )
    )
}

# django-rest-framwork
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAdminUser',),
    'PAGE_SIZE': 10
}

#ldap
from django_auth_ldap.config import LDAPSearch, MemberDNGroupType
import ldap
AUTH_LDAP_SERVER_URI = 'ldap://***:389'
AUTH_LDAP_BIND_DN = "cn=root"
AUTH_LDAP_BIND_PASSWORD = "***"

# ldap
AUTH_LDAP_CONNECTION_OPTIONS = {ldap.OPT_REFERRALS: 0}

# 查询用户
AUTH_LDAP_USER_DN_TEMPLATE = "uid=%(user)s,cn=users,dc=enn,dc=com"

# 查找组
AUTH_LDAP_GROUP_SEARCH = LDAPSearch("cn=ecloud,cn=groups, dc=enn, dc=com",
                                    ldap.SCOPE_SUBTREE, "(objectClass=groupOfUniqueNames)"
                                    )

AUTH_LDAP_GROUP_TYPE = MemberDNGroupType(member_attr='uniquemember', name_attr='cn')

# 设置组权限
AUTH_LDAP_REQUIRE_GROUP = "cn=ecloud,cn=groups,dc=enn,dc=com"
# AUTH_LDAP_DENY_GROUP = "cn=cloud,cn=groups,dc=enn,dc=com"

'''
# 验证 Django 的 User 的is_staff，is_active，is_superuser
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    "is_staff": "cn=cloud,cn=groups,dc=enn,dc=com",
    "is_active": "cn=cloud,cn=groups,dc=enn,dc=com",
    "is_superuser": "cn=cloud,cn=groups,dc=enn,dc=com",
}
'''

# 把LDAP中用户条目的属性 映射到 Django 的User
AUTH_LDAP_USER_ATTR_MAP = {
    "username": "uid",
    "password": "userPassword",
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail",
}
AUTH_LDAP_PROFILE_ATTR_MAP = {
    "mobile": "employeeNumber"
}

# 当这个值为 True， LDAP的用户条目映射并创建 Django User 的时候，会自动映创建Group
# AUTH_LDAP_MIRROR_GROUPS = True
# 是否每次都从LDAP 把用户信息 更新到 Django 的User
AUTH_LDAP_ALWAYS_UPDATE_USER = True
# 如果为True， LDAPBackend将提供基于LDAP组身份验证的用户属于的组的权限
AUTH_LDAP_FIND_GROUP_PERMS = True
# 如果为True，LDAP组成员将使用Django的缓存框架。
AUTH_LDAP_CACHE_GROUPS = True
# 缓存时长
AUTH_LDAP_GROUP_CACHE_TIMEOUT = 1800

AUTH_LDAP_BIND_AS_AUTHENTICATING_USER = True

# 设置使用 LDAPBackend
AUTHENTICATION_BACKENDS = (
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
)

# vspherer interface config
VC_POOL = {
    ***
}
USER = "cmdb"
PASSWORD = "1qazxsw@"

# celery settings
import djcelery
djcelery.setup_loader()
BROKER_URL = 'django://'  # 直接使用django做broker生产环境不建议，建议使用redis或者rabbitMQ
# BROKER_URL = 'redis://:auth@10.1.1.1:22222/0'  # broker使用reids
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'  # 定时任务
CELERY_RESULT_BACKEND = 'djcelery.backends.database:DatabaseBackend'
CELERY_ENABLE_UTC = False  # 不是用UTC
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_TASK_RESULT_EXPIRES = 10  # 任务结果的时效时间
CELERYD_LOG_FILE = BASE_DIR + "/logs/celery/celery.log"  # log路径
CELERYBEAT_LOG_FILE = BASE_DIR + "/logs/celery/beat.log"  # beat log路径
CELERY_ACCEPT_CONTENT = ['pickle', 'json', 'msgpack', 'yaml']  # 允许的格式

# send mail
EMAIL_HOST = '***'
EMAIL_PORT = 25
EMAIL_HOST_USER = '***'
EMAIL_HOST_USER_TLS = True
EMAIL_SUBJECT_PREFIX = u'[CMDB自动报表]'

# log conf
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
       'standard': {
            'format': '%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s'}  #日志格式
    },
    'filters': {
    },
    'handlers': {
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR + '/logs/cmdb.log',
            'formatter': 'standard',
        },
    },
    'loggers': {
        'vmserver': {
            'handlers': ['default'],
            'level': 'INFO',
            'propagate': False,
        },
    }
}
